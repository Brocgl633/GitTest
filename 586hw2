abstract-factory:
Client-1
Process() {
    Server sortF = new ServerSort("heap");
    sortF.Sort();

    Server searchF = new ServerSearch("binary");
    searchF.Search();
}



public class ServerSort extends Server {

    String sortName;

    public ServerSort(String sortName) {
        this.sortName = sortName;
    }

    @Override
    void Sort() {
        Sort sort;
        if ("heap".equals(sortName)) {
            sort = new HeapSort();
            sort.sort();
        } else if ("merge".equals(sortName)) {
            sort = new MergeSort();
            sort.sort();
        }
    }

    @Override
    void Search() {
        System.out.println("Sort Server, no Search operations!");
    }
}



public class ServerSearch extends Server {

    String searchName;

    public ServerSearch(String searchName) {
        this.searchName = searchName;
    }

    @Override
    void Sort() {
        System.out.println("Search Server, no Sort operations!");
    }

    @Override
    void Search() {
        Search search;
        if ("binary".equals(searchName)) {
            search = new BinarySearch();
            search.Search();
        } else if ("linear".equals(searchName)) {
            search = new LinearSearch();
            search.Search();
        }
    }
}



public abstract class ServerFactory {

    void Sort(){}

    void Search(){}
}


public interface Sort {

    void Sort();
}



public interface Search {

    void Search();
}



public class HeapSort implements Sort {

    @Override
    public void Sort() {
        HeapSort();
    }

    void HeapSort() {
        // concrete heap sort code
    }
}



public class MergeSort implements Sort {

    @Override
    public void Sort() {
        MergeSort();
    }

    void MergeSort() {
        // concrete merge sort code
    }
}



public class BinarySearch implements Search {

    @Override
    public void Search() {
        BinarySearch();
    }

    void BinarySearch() {
        // concrete binary search code
    }
}



public class LinearSearch implements Search {

    @Override
    public void Search() {
        LinearSearch();
    }

    void LinearSearch() {
        // concrete linear search code
    }
}



strategy:
Client-1
Process() {
    Server server = new Server(new HeapSort(), new BinarySearch());
    server.Sort();
    server.Search();
}



public class Server {
    SortStrategy sortStrategy;
    SearchStrategy searchStrategy;

    public Server(SortStrategy sortStrategy, SearchStrategy searchStrategy) {
        this.sortStrategy = sortStrategy;
        this.searchStrategy = searchStrategy;
    }

    void Sort() {
        sortStrategy.Sort();
    }

    void Search() {
        searchStrategy.Search();
    }
}



public interface SortStrategy {

    void Sort();
}



public interface SearchStrategy {

    void Search();
}



public class HeapSort implements Sort {

    @Override
    public void Sort() {
        HeapSort();
    }

    void HeapSort() {
        // concrete heap sort code
    }
}



public class MergeSort implements Sort {

    @Override
    public void Sort() {
        MergeSort();
    }

    void MergeSort() {
        // concrete merge sort code
    }
}



public class BinarySearch implements Search {

    @Override
    public void Search() {
        BinarySearch();
    }

    void BinarySearch() {
        // concrete binary search code
    }
}



public class LinearSearch implements Search {

    @Override
    public void Search() {
        LinearSearch();
    }

    void LinearSearch() {
        // concrete linear search code
    }
}
