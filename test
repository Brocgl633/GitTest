import com.sun.xml.internal.ws.util.StringUtils;
import sun.misc.BASE64Decoder;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.Socket;
import java.nio.ByteBuffer;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeFormatterBuilder;
import java.util.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.stream.Collectors;

public class test4 {

    static Map<File, byte[]> map = new TreeMap<>((o1, o2) -> o1.getName().compareTo(o2.getName()));

    public static void main(String[] args) throws IOException {
        File file = new File("C:\\Users\\c30035198\\Pictures\\Camera Roll\\a.txt");
        int partSize = (int) Math.ceil((double) file.length() / 4);
        int numParts = (int) Math.ceil((double) file.length() / partSize);
        split(file, partSize, numParts);
        ExecutorService executor = Executors.newFixedThreadPool(map.size());
        executor.submit(() -> {
            try {
                download("C:\\Users\\c30035198\\Pictures\\Camera Roll\\example_downloaded.txt", 4, 10);
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        });
        executor.shutdown();
    }

    public static void split(File file, int partSize, int numParts) throws IOException {
        BufferedInputStream bis = new BufferedInputStream(new FileInputStream(file));
        byte record = 0;
        for (int i = 0; i < numParts; i++) {
            String partFName = file.getName() + "_node_" + i;
            File curFile = new File(file.getParent(), partFName);
            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(curFile));
            byte[] buffer = new byte[partSize];
            int bytesRead = bis.read(buffer);
            map.put(curFile, new byte[]{record, (byte) (record + partSize)});
            record += partSize + 1;
            bos.write(buffer, 0, bytesRead);
            bos.close();
        }
        bis.close();
    }

    public static void download(String savePath, int start, int end) throws IOException {
        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(savePath));
        for (Map.Entry<File, byte[]> entry : map.entrySet()) {
            byte[] value = entry.getValue();
            if (value[1] < start) {
                continue;
            }
            int rightBon = Math.min(end, value[1]);
            BufferedInputStream bis = new BufferedInputStream(new FileInputStream(entry.getKey()));
            byte[] buffer = new byte[rightBon - start + 1];
            int bytesRead = bis.read(buffer);
            while (bytesRead != -1) {
                bos.write(buffer, 0, bytesRead);
                bytesRead = bis.read(buffer);
            }
            bis.close();
            if (end <= value[1]) {
                break;
            }
        }
        bos.close();
    }

}
