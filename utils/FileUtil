package com.iit.cao.pa3.utils;

import com.iit.cao.pa3.pojo.Node;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

public class FileUtil {

    public static void generateEachWeakPeerFiles(List<Node> nodes) throws IOException {
        for (Node node : nodes) {
            String dir = "src/dir/" + node.getNodeName();
            File file = new File(dir);
            if (!file.exists()) {
                file.mkdirs();
            }
            for (int i = 1; i <= 3; i++) {
                File file2 = new File(dir, node.getNodeName() + "#V" + i + ".txt");
                if (!file2.exists()) {
                    file2.createNewFile();
                }
            }
        }
    }

    public static void generateTopologyConfigFile(String path, List<Node> nodeList) {
        FileWriter fw = null;
        try {
            File file = new File(path);
            fw = new FileWriter(file, false);
            for (Node superNode : nodeList) {
                fw.write(superNode.getNodeName() + ": \n");
                fw.write("    ip: " + superNode.getIp() + "\n");
                fw.write("    serverPort: " + superNode.getServerPort() + "\n");
                fw.write("    clientPort: " + superNode.getClientPort() + "\n");
                fw.write("    linkNodes: \n");
                for (Node weakNode : superNode.getLinkNodeList()) {
                    fw.write("        - nodeName: " + weakNode.getNodeName() + "\n");
                    fw.write("          ip: " + weakNode.getIp() + "\n");
                    fw.write("          serverPort: " + weakNode.getServerPort() + "\n");
                }
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            if (fw != null) {
                try {
                    fw.close();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        }
    }

    public static List<File> getAllFiles(String path) {
        List<File> res = new ArrayList<>();
        File dir = new File(path);
        setFileIntoRes(dir, res);
        return res;
    }

    public static void setFileIntoRes(File f, List<File> list) {
        for (File file : Objects.requireNonNull(f.listFiles())) {
            if (file.isDirectory()) {
                setFileIntoRes(file, list);
            } else if (file.isFile()) {
                list.add(file);
            }
        }
    }

}
