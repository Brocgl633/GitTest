package com.iit.cao.pa3.utils;

import com.iit.cao.pa3.pojo.Node;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.yaml.snakeyaml.Yaml;

import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class YamlUtil {

    private static Map<String, Object> properties;

    private static Map<String, Object> jdbcProperties;

    private static volatile YamlUtil singletonYamlUtil;

    static {
        InputStream in = null;
        InputStream inJdbc = null;
        try {
            properties = new HashMap<>();
            jdbcProperties = new HashMap<>();
            Yaml yaml = new Yaml();
            Yaml yamlJdbc = new Yaml();
            in = YamlUtil.class.getClassLoader().getResourceAsStream("allToAllTopology.yaml");
            inJdbc = YamlUtil.class.getClassLoader().getResourceAsStream("application.yaml");
            properties = yaml.loadAs(in, HashMap.class);
            jdbcProperties = yamlJdbc.loadAs(inJdbc, HashMap.class);
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                assert in != null;
                in.close();
                assert inJdbc != null;
                inJdbc.close();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }

    private YamlUtil() {
    }

    public static YamlUtil getInstance() {
        if (singletonYamlUtil == null) {
            synchronized (YamlUtil.class) {
                if (singletonYamlUtil == null) {
                    singletonYamlUtil = new YamlUtil();
                }
            }
        }
        return singletonYamlUtil;
    }

    public static List<Node> transferMapToObject(Object value) {
        ObjectMapper mapper = new ObjectMapper();
        mapper.enable(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
        return mapper.convertValue(value, new TypeReference<List<Node>>() {
        });
    }

    public Object getValue(String root, String key) {
        Map<String, Object> rootProperty = (Map<String, Object>) properties.get(root);
        return rootProperty.getOrDefault(key, "");
    }

    public Object getValueJdbc(String root, String key) {
        String[] split = root.split("\\.");
        Map<String, Object> rootProperty = (Map<String, Object>) jdbcProperties.get(split[0]);
        Map<String, Object> dataBaseInfoMap = (Map<String, Object>) rootProperty.get(split[1]);
        return dataBaseInfoMap.getOrDefault(key, "");
    }

}
