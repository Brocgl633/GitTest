package com.iit.cao.pa3;

import com.iit.cao.pa3.pojo.Node;

import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import static java.lang.System.exit;

import com.iit.cao.pa3.utils.FileUtil;
import lombok.Data;

@Data
public class TopologyGeneration {

    private final Integer superPeerNum;

    private final Integer branchNumPerSuperPeer;

    private final List<Node> superPeerList = new ArrayList<>();

    private final List<Node> weakPeerList = new ArrayList<>();

    public TopologyGeneration(Integer superPeerNum, Integer branchNumPerSuperPeer) {
        this.superPeerNum = superPeerNum;
        this.branchNumPerSuperPeer = branchNumPerSuperPeer;
    }

    public static void main(String[] args) throws IOException {
        System.out.println("Here are two topology types:");
        System.out.println("1: tree");
        System.out.println("2: all-to-all");
        System.out.println("3: exit");
        System.out.print("Please choose one topology you want to generate : ");
        TopologyGeneration topology = new TopologyGeneration(9, 3);
        topology.generate();
        Scanner input = new Scanner(System.in);
        int option = input.nextInt();
        switch (option) {
            case 1:
                topology.generateTreeTopology(0);
                generateYaml("tree", topology);
                break;
            case 2:
                topology.generateAllToAllTopology();
                generateYaml("allToAll", topology);
                break;
            case 3:
                exit(1);
                break;
            default:
                System.out.println("Incorrect input. Please try again.");
                break;
        }

    }

    private static void generateYaml(String topologyType, TopologyGeneration topology) throws IOException {
        String path = "src/main/resources/topology.yaml";
        List<Node> nodeList = new ArrayList<>();
        nodeList.addAll(topology.getSuperPeerList());
        nodeList.addAll(topology.getWeakPeerList());
        FileUtil.generateTopologyConfigFile(path, nodeList);
        System.out.println("Generate [ " + topologyType + " ] topology successfully!");
        FileUtil.generateEachWeakPeerFiles(topology.getWeakPeerList());
        System.out.println("Generate each weakPeer files successfully!");
    }

    public void generate() throws UnknownHostException {
        int superPeerServerPort = 60000;
        int superPeerClientPort = 7000;
        int wearPeerServerPort = 65000;
        int wearPeerClientPort = 7500;
        String ip = InetAddress.getLocalHost().getHostAddress();
        int weakPeerId = 1;
        for (int i = 1; i <= superPeerNum; i++) {
            Node superPeerNode = new Node("SuperPeer#V" + i, ip, ++superPeerServerPort, ++superPeerClientPort, new ArrayList<>());
            this.superPeerList.add(superPeerNode);

            for (int j = 1; j <= branchNumPerSuperPeer; j++) {
                Node weakPeerNode = new Node("WeakPeer#V" + weakPeerId++, ip, ++wearPeerServerPort, ++wearPeerClientPort, new ArrayList<>());
                this.weakPeerList.add(weakPeerNode);
                weakPeerNode.getLinkNodeList().add(superPeerNode);
            }
        }
    }

    public void generateTreeTopology(int x) {
        Node parent = superPeerList.get(x);
        if (x * 2 + 1 < superPeerList.size()) {
            Node child1 = superPeerList.get(x * 2 + 1);
            parent.getLinkNodeList().add(child1);
            child1.getLinkNodeList().add(parent);
            generateTreeTopology(x * 2 + 1);
        }
        if (x * 2 + 2 < superPeerList.size()) {
            Node child2 = superPeerList.get(x * 2 + 2);
            parent.getLinkNodeList().add(child2);
            child2.getLinkNodeList().add(parent);
            generateTreeTopology(x * 2 + 2);
        }
    }

    public void generateAllToAllTopology() {
        for (Node superPeerA : superPeerList) {
            for (Node superPeerB : superPeerList) {
                if (!superPeerA.getNodeName().equals(superPeerB.getNodeName())) {
                    superPeerA.getLinkNodeList().add(superPeerB);
                }
            }
        }
    }

}
