import java.io.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

class Peer {
    private String peerName;

    public Peer(String name) {
        this.peerName = name;
    }

    public void uploadFilePart(File filePart) {
        // 实现文件上传逻辑
        System.out.println("Uploading file part to Peer: " + peerName);
    }

    public void downloadFilePart(File filePart) {
        // 实现文件下载逻辑
        System.out.println("Downloading file part from Peer: " + peerName);
    }
}

public class P2PFileSharingSystem {
    public static void main(String[] args) {
        // 假设已经有4个 Peer
        Peer[] peers = new Peer[4];
        peers[0] = new Peer("Peer1");
        peers[1] = new Peer("Peer2");
        peers[2] = new Peer("Peer3");
        peers[3] = new Peer("Peer4");

        // 上传文件到4个 Peer
        File file = new File("example.txt");
        File[] fileParts = splitFile(file, peers.length);
        for (int i = 0; i < peers.length; i++) {
            peers[i].uploadFilePart(fileParts[i]);
        }

        // 使用线程池并行下载文件部分
        ExecutorService executor = Executors.newFixedThreadPool(peers.length);
        for (int i = 0; i < peers.length; i++) {
            int partNumber = i; // 部分编号从0开始
            executor.submit(() -> {
                peers[partNumber].downloadFilePart(fileParts[partNumber]);
            });
        }

        // 关闭线程池
        executor.shutdown();
    }

    // 将文件分成指定数量的部分
    private static File[] splitFile(File file, int parts) {
        long fileSize = file.length();
        long partSize = fileSize / parts;
        File[] fileParts = new File[parts];
        try (FileInputStream fis = new FileInputStream(file)) {
            for (int i = 0; i < parts; i++) {
                String partFileName = file.getName() + ".part" + i;
                fileParts[i] = new File(partFileName);
                try (FileOutputStream fos = new FileOutputStream(fileParts[i])) {
                    byte[] buffer = new byte[(int) partSize];
                    int bytesRead = fis.read(buffer);
                    fos.write(buffer, 0, bytesRead);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return fileParts;
    }
}
