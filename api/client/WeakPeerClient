package com.iit.cao.pa3.client;

import com.iit.cao.pa3.Server.RegistrationCenter;
import com.iit.cao.pa3.Server.ServerThread;
import com.iit.cao.pa3.db.bean.Peer;
import com.iit.cao.pa3.pojo.Constants;
import com.iit.cao.pa3.pojo.InvalidationMessage;
import com.iit.cao.pa3.pojo.QueryMessage;
import com.iit.cao.pa3.pojo.Response;
import com.iit.cao.pa3.api.WeakPeerService;
import com.iit.cao.pa3.api.SuperPeerService;
import com.iit.cao.pa3.pojo.Node;
import com.iit.cao.pa3.utils.*;

import java.io.*;
import java.nio.ByteBuffer;
import java.util.*;

public class WeakPeerClient extends Thread {

    private final String weakPeerName;

    private final String path;

    private final String downloadPath;

    private final List<Node> weakPeerLinkNodeList;

    private static Integer seqNumb = 0;

    private static Integer ttr = 5;

    private final Timer timer = new Timer();

    public WeakPeerClient(String weakPeerName, List<Node> weakPeerLinkNodeList) {
        this.weakPeerName = weakPeerName;
        this.path = "src/dir/" + weakPeerName;
        this.downloadPath = "src/dir/" + weakPeerName + "/download/";
        if (!new File(this.downloadPath).exists()) {
            new File(this.downloadPath).mkdirs();
        }
        this.weakPeerLinkNodeList = weakPeerLinkNodeList;
    }

    private synchronized void addSequence() {
        seqNumb++;
        System.out.println(Thread.currentThread().getName() + seqNumb);
    }

    private int convertByteArrayToInt(byte[] intBytes) {
        ByteBuffer byteBuffer = ByteBuffer.wrap(intBytes);
        return byteBuffer.getInt();
    }

    private void downloadFile(String fileName, SuperPeerService superPeerService, Stub stub) {
        String messageId = UUID.randomUUID().toString();
        addSequence();
        QueryMessage message = new QueryMessage(weakPeerName, fileName, seqNumb, messageId, weakPeerLinkNodeList);
        List<Peer> peerContainFileList = superPeerService.queryFiles(message);
        assert peerContainFileList != null;
        int size = peerContainFileList.size();
        if (size <= 0) {
            System.out.println("File name [ " + fileName + " ] is not found. Message does not hit.");
            return;
        }

        Peer masterPeer = null;
        for (Peer peer : peerContainFileList) {
            if (peer.getType().equals("master")) {
                masterPeer = peer;
            }
        }
        System.out.println("File name in this peer ===> " + masterPeer + ".");

        String nodeName = "WeakPeer#V" + masterPeer.getPeerid();
        String ip = (String) YamlUtil.getInstance().getValue(nodeName, "ip");
        Integer port = (Integer) YamlUtil.getInstance().getValue(nodeName, "serverPort");
        ServerThread server = new ServerThread(nodeName, ip, port);
        server.addServer();
        server.start();
        WeakPeerService weakPeerService = (WeakPeerService) stub.getStub(WeakPeerService.class, nodeName);

        Response response = weakPeerService.fetchFileContent(masterPeer);
        if (response.getCode() == Constants.READ_FILE_TO_BUFFER_DATA_SUCCESS) {
            File file = null;
            try {
                file = new File(downloadPath + fileName);
                if (file.createNewFile()) {
                    System.out.println("Create file [ " + fileName + " ] in local.");
                } else {
                    System.out.println("Can not download from remote peer [ " + masterPeer.getPeername() + " ].");
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }

            // 将缓冲区的文件下载至本地
            BufferedWriter bw = null;
            try {
                bw = new BufferedWriter(new FileWriter(masterPeer.getFilepath()));
                bw.write((String) response.getData());
                bw.close();
            } catch (IOException ex) {
                ex.printStackTrace();
            } finally {
                if (bw != null) {
                    try {
                        bw.close();
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                }
            }

//            FileOutputStream fileOutputStream = null;
//            try {
//                fileOutputStream = new FileOutputStream(file);
//            } catch (FileNotFoundException e) {
//                e.printStackTrace();
//            }
//            // to write data into the file
//            ArrayList<byte[]> data = (ArrayList<byte[]>) response.getData();
//            // to get blockNum & tailLen first
//            int tailLen = convertByteArrayToInt(data.get(data.size() - 1));
//            data.remove(data.size() - 1);
//            int blockNum = convertByteArrayToInt(data.get(data.size() - 1));
//            data.remove(data.size() - 1);
//            for (byte[] buffer : data) {
//                try {
//                    if (blockNum <= 0 && tailLen != 0) {
//                        fileOutputStream.write(buffer, 0, tailLen);
//                        fileOutputStream.flush();
//                    } else {
//                        fileOutputStream.write(buffer);
//                        fileOutputStream.flush();
//                    }
//                    blockNum -= 1;
//                } catch (IOException ex) {
//                    ex.printStackTrace();
//                }
//            }
//            try {
//                fileOutputStream.close();
//            } catch (Exception ex) {
//                ex.printStackTrace();
//            }
            boolean readOnly = file.setReadOnly();
            System.out.println(readOnly);
        }
        String filePath = downloadPath + fileName;
        File file = new File(filePath);
        String[] strings = weakPeerName.split("_");
        int clientID = Integer.parseInt(strings[strings.length - 1]);
        if (file.exists()) {
            Response cur = superPeerService.registry(clientID, weakPeerLinkNodeList.get(0).getNodeName(), file);
            System.out.println(cur);
        } else {
            System.out.println("file not exits...");
        }
    }

    @Override
    public void run() {
        RegistrationCenter registrationCenter = new RegistrationCenter();
        Stub stub = new Stub(registrationCenter);
        String superName = weakPeerLinkNodeList.get(0).getNodeName();
        SuperPeerService superPeerService = (SuperPeerService) stub.getStub(SuperPeerService.class, superName);
        Scanner input = new Scanner(System.in);
        timer.schedule(new ScheduleTask(), 0, ttr * 1000);

        while (true) {
            System.out.println("*******************************************************");
            System.out.println("Welcome to peer to peer distributed system.");
            System.out.println("Current client is " + weakPeerName);
            System.out.println("0: Register one file of the working directory.");
            System.out.println("1: Register all files of the working directory.");
            System.out.println("2: Query a file from network.");
            System.out.println("3: Download file from a specific node.");
            System.out.println("4: List all files of the current directory.");
            System.out.println("5: Deregister the shared file.");
            System.out.println("6: Modify a local file.");
            System.out.println("7: fresh a file.");
            System.out.println("8: To exit the program.");
            System.out.println("*******************************************************");
            System.out.println("please input you request index: ");
            int requestIndex = input.nextInt();
            switch (requestIndex) {
                case 0: {
                    System.out.println("register one file!");
                    System.out.println("please input the file name to register: ");
                    String fileName = input.next();
                    String filePath = "src/dir/" + fileName;
                    File file = new File(filePath);
                    String[] splits = weakPeerName.split("#V");
                    int weakPeerId = Integer.parseInt(splits[splits.length - 1]);
                    if (file.exists()) {
                        Response response = superPeerService.registry(weakPeerId, superName, file);
                        System.out.println(response);
                    } else {
                        System.out.println("file not exits...");
                    }
                    break;
                }
                case 1: {
                    List<File> list = FileUtil.getAllFiles(path);
                    String[] strings = weakPeerName.split("_");
                    int clientID = Integer.parseInt(strings[strings.length - 1]);
                    Response response = superPeerService.registryAll(clientID, superName, list);
                    System.out.println(response);
                    break;
                }
                case 2: {
                    System.out.println("please input the file name: ");
                    String fileName = input.next();
                    String messageId = UUID.randomUUID().toString().substring(1, 10);
                    addSequence();
                    messageId += seqNumb;
                    QueryMessage message = new QueryMessage(weakPeerName, fileName, seqNumb, messageId, weakPeerLinkNodeList);
                    List<Peer> peers = superPeerService.queryFiles(message);
                    for (Peer peer : peers) {
                        System.out.println(peer);
                    }
                    break;
                }
                case 3: {
                    System.out.println("This is download request");
                    System.out.println("Please input the file you want to download: ");
                    String fileName = input.next();
                    downloadFile(fileName, superPeerService, stub);
                    break;
                }
                case 4: {
                    List<File> list = FileUtil.getAllFiles(path);
                    for (File file : list) {
                        System.out.println(file);
                    }
                    break;
                }
                case 5: {
                    System.out.println("Please input the file you want to deregister: ");
                    String fileName = input.next();
                    String[] strings = weakPeerName.split("_");
                    int clientID = Integer.parseInt(strings[strings.length - 1]);
                    Response response = superPeerService.deregister(clientID, fileName, false);
                    if (response.getCode() == 200) {
                        System.out.println("deregister success!");
                    } else {
                        System.out.println(response.getMessage());
                    }
                    break;
                }
                case 6: {
                    System.out.println("Please input the file you want to modify: ");
                    String fileName = input.next();
                    String[] strings = weakPeerName.split("_");
                    int clientID = Integer.parseInt(strings[strings.length - 1]);
                    // 1. modify this file
                    String filePath = "src/dir/" + weakPeerName + "/" + fileName;
                    // System.out.println(filePath);
                    File file = new File(filePath);
                    if (file.exists()) {
                        if (file.canRead() && file.canWrite()) {
                            try {
                                BufferedWriter writer = new BufferedWriter(new FileWriter(filePath, true));
                                writer.write("textToAppend");
                                writer.close();
                            } catch (IOException ex) {
                                ex.printStackTrace();
                            }
                            Response response = superPeerService.registry(clientID, superName, file);
                            System.out.println(response);

                            // 2. deregister the previous version register file.
                            response = superPeerService.deregister(clientID, fileName, true);
                            if (response.getCode() == 200) {
                                System.out.println("deregister success!");
                            } else {
                                System.out.println(response.getMessage());
                            }

                            // 3. broadcast invalid message to all nodes in the network
                            String messageId = UUID.randomUUID().toString().substring(1, 10);
                            addSequence();
                            InvalidationMessage message = new InvalidationMessage(weakPeerName, fileName, seqNumb,
                                    (Integer) response.getData(), messageId, weakPeerLinkNodeList);
                            System.out.println(response.getData());
                            superPeerService.pushInvalidation(message);
                        } else {
                            System.out.println("You can't modify the copy because it's read only.");
                        }
                    } else {
                        System.out.println("file not exits...");
                    }
                    break;
                }
                case 7: {
                    System.out.println("Please input a file name you want to refresh : ");
                    String fileName = input.next();
                    String filePath = downloadPath + fileName;
                    File file = new File(filePath);
                    if (file.exists()) {
                        System.out.println("This request hit the file ...");

                        // 在数据库中删除该文件
                        String[] splits = weakPeerName.split("#V");
                        int weakPeerId = Integer.parseInt(splits[splits.length - 1]);
                        Response response = superPeerService.deregister(weakPeerId, fileName, false);
                        if (response.getCode() == 200) {
                            System.out.println(response.getMessage());
                        }

                        // 在当前wearPeer目录中删除该文件
                        if (file.delete()) {
                            downloadFile(fileName, superPeerService, stub);
                        } else {
                            System.out.println("others are using the file.");
                        }
                    }
                    break;
                }
                case 8: {
                    System.out.println("you exit this service!");
                    System.exit(0);
                    input.close();
                    break;
                }
                default: {
                    System.err.println("Wrong action, please try again!");
                    break;
                }
            }
        }
    }

    private class ScheduleTask extends TimerTask {
        @Override
        public void run() {
            RegistrationCenter registrationCenter = new RegistrationCenter();
            Stub stub = new Stub(registrationCenter);
            String superPeerName = weakPeerLinkNodeList.get(0).getNodeName();
            SuperPeerService superPeerService = (SuperPeerService) stub.getStub(SuperPeerService.class, superPeerName);

            String[] splits = weakPeerName.split("#V");
            int weakPeerId = Integer.parseInt(splits[splits.length - 1]);
            for (File file : FileUtil.getAllFiles(downloadPath)) {
                if (file == null) {
                    System.out.println("no file");
                    break;
                }
                Response res = superPeerService.pollVersion(file, weakPeerId);
                ttr = (int) res.getData();
                if (ttr < 0) {
                    System.out.println("Please refresh the file [ " + file.getName() + " ]. You can choose '7' item.");
                }
            }
        }
    }

}
