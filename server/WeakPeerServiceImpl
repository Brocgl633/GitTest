package com.iit.cao.pa3.Server;

import com.iit.cao.pa3.db.bean.Peer;
import com.iit.cao.pa3.api.WeakPeerService;
import com.iit.cao.pa3.pojo.Constants;
import com.iit.cao.pa3.pojo.Response;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.ArrayList;

/**
 * @description: An implementation of services offered by leaf node.
 * @author: Xue Zhang
 * @date: 2022-03-18
 * @version: 1.0
 */
public class WeakPeerServiceImpl implements WeakPeerService {

    private byte[] intToBytes(final int i) {
        ByteBuffer bb = ByteBuffer.allocate(4);
        bb.putInt(i);
        return bb.array();
    }

    @Override
    public Response fetchFileContent(Peer peer) {
        BufferedReader br = null;
        Response response = null;

//        FileInputStream fileInputStream = null;
//        byte[] buffer = new byte[Constants.BUFFER_SIZE];
//        // the last 2 nodes used to store blockNum & tailLen
//        ArrayList<byte[]> data = new ArrayList<byte[]>();
//        Response response = null;
//        int numberOfBytes;
        try {
            String path = peer.getFilepath();
            br = new BufferedReader(new FileReader(path));
            StringBuilder sbd = new StringBuilder();
            String line;
            while ((line = br.readLine()) != null) {
                sbd.append(line);
                sbd.append(System.lineSeparator());
            }

            response = new Response(Constants.READ_FILE_TO_BUFFER_DATA_SUCCESS, "Read all data of the file.", sbd.toString());



//            fileInputStream = new FileInputStream(peer.getFilepath());
//            numberOfBytes = fileInputStream.read(buffer);
//            int tailLen = 0, blockNum = 0;
//
//            while (numberOfBytes != -1) {
//                if (numberOfBytes == Constants.BUFFER_SIZE) {
//                    blockNum += 1;
//                } else {
//                    tailLen = numberOfBytes;
//                }
//                data.add(buffer);
//                numberOfBytes = fileInputStream.read(buffer);
//            }
//            // to store blockNum & tailLen for creating a new file
//            data.add(intToBytes(blockNum));
//            data.add(intToBytes(tailLen));
//
//            response = new Response(Constants.READ_FILE_TO_BUFFER_DATA_SUCCESS, "Read all data of the file.", data);
        } catch (Exception ex) {
            ex.printStackTrace();
            response = new Response(Constants.READ_FILE_TO_BUFFER_DATA_ERROR, "IO exception at reading step");
        } finally {
            try {
//                fileInputStream.close();
                br.close();
            } catch (IOException ex) {
                ex.printStackTrace();
                response = new Response(Constants.READ_FILE_TO_BUFFER_DATA_ERROR_CLOSE, "IO exception at close step");
            } finally {
                return response;
            }
        }
    }

}
