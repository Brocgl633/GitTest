package com.iit.cao.pa3.Server;

import com.iit.cao.pa3.pojo.Invocation;
import com.iit.cao.pa3.utils.LogUtil;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.lang.reflect.Method;
import java.net.Socket;
import java.util.Map;

public class Skeleton implements Runnable {

    private final Socket socket;

    private final Map<String, Class<?>> services;

    private final LogUtil log;

    public Skeleton(Socket socket, Map<String, Class<?>> services, LogUtil log) {
        this.socket = socket;
        this.services = services;
        this.log = log;
    }

    @Override
    public void run() {
        ObjectInputStream in = null;
        ObjectOutputStream out = null;
        try {
            in = new ObjectInputStream(socket.getInputStream());
            out = new ObjectOutputStream(socket.getOutputStream());
            Invocation invocation = (Invocation) in.readObject();
            String proxyName = invocation.getInterfaceName();
            log.write("Proxy object [ " + proxyName + " ] receives the rpc request ...");
            log.write("Invocation ===> " + invocation);
            Class<?> clazz = services.get(proxyName);
            Method method = clazz.getMethod(invocation.getMethodName(), invocation.getParamTypes());
            Object invoke = method.invoke(clazz.getDeclaredConstructor().newInstance(), invocation.getArgs());
            log.write(proxyName + " has invoked the method [ " + invoke + " ].");
            out.writeObject(invoke);
            out.flush();
            socket.shutdownOutput();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (out != null) {
                try {
                    out.close();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            try {
                socket.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
