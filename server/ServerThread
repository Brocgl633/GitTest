package com.iit.cao.pa3.Server;

import com.iit.cao.pa3.api.WeakPeerService;
import com.iit.cao.pa3.api.SuperPeerService;
import com.iit.cao.pa3.pojo.Constants;
import com.iit.cao.pa3.utils.LogUtil;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class ServerThread extends Thread {

    private static final LogUtil log = new LogUtil("SuperPeerServer");

    private static final Map<String, Class<?>> SERVICE_MAP = new HashMap<>();

    private static final RegistrationCenter REGISTRATION_CENTER = new RegistrationCenter();

    private final String serverName;

    private final String serverIP;

    private final Integer serverPort;

    public ServerThread(String serverName, String serverIP, Integer serverPort) {
        this.serverName = serverName;
        this.serverIP = serverIP;
        this.serverPort = serverPort;
    }

    public void addServer() {
        log.write(serverName + " starts to provide services in ip " + serverIP + " with port " + serverPort + " ...");
        if (serverName.startsWith("Super")) {
            SERVICE_MAP.put(SuperPeerService.class.getName(), SuperPeerServiceImpl.class);
        } else {
            SERVICE_MAP.put(WeakPeerService.class.getName(), WeakPeerServiceImpl.class);
        }
        for (String key : SERVICE_MAP.keySet()) {
            REGISTRATION_CENTER.registerServer(serverName, serverIP, serverPort, "active", key);
        }
    }

    @Override
    public void run() {
        ExecutorService newCachedThreadPool = Executors.newCachedThreadPool();
        ServerSocket serverSocket;
        try {
            serverSocket = new ServerSocket(serverPort);
            serverSocket.setSoTimeout(Constants.SOCKET_SO_TIMEOUT);
            while (true) {
                final Socket socket = serverSocket.accept();
                newCachedThreadPool.execute(new Skeleton(socket, SERVICE_MAP, log));
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

}
