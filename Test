package iit_550_n;

import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.concurrent.CountDownLatch;

public class Test {

	private static final int SERVER_SOCKET_PORT = 22233;

	private static final String DOWNLOAD_PATH = "downloads/";

	private final static int CLIENT_THREAD_COUNT = 10;

	private final static CountDownLatch latch = new CountDownLatch(CLIENT_THREAD_COUNT);

	public static void main(String[] args) {
		BufferedReader input = null;
		try {
			input = new BufferedReader(new InputStreamReader(System.in));
			System.out.println("****** Client-Server mode file downloading system test program ******");
			System.out.println("Please input client ip: ");
			String ip = input.readLine();
			System.out.println("Please input the absolute path file: ");
			String absPath = input.readLine();

			int idx = absPath.lastIndexOf("/");
			String dir = absPath.substring(0, idx + 1);
			String fileName = absPath.substring(idx + 1);

			long startTime = System.currentTimeMillis();
			for (int i = 0; i < CLIENT_THREAD_COUNT; i++) {
				(new DownloadTest(ip, dir, fileName)).start();
			}
			latch.await();
			long endTime = System.currentTimeMillis();
			double time = (double) (endTime - startTime) / CLIENT_THREAD_COUNT;

			File file = new File(DOWNLOAD_PATH + fileName);
			System.out.println("File size: " + file.length() +
					" bytes, thread count: " + CLIENT_THREAD_COUNT +
					", download average time: " + time + " ms.");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private static class DownloadTest extends Thread {

		private String ip;

		private String fileDirPath;

		private String fileName;

		public DownloadTest(String ip, String fileDirPath, String fileName) {
			this.ip = ip;
			this.fileDirPath = fileDirPath;
			this.fileName = fileName;
		}

		public void run() {
			System.out.println("Download test starting ...");
			FileUtil.downloadFile(ip, SERVER_SOCKET_PORT, fileName, new ArrayList<>(Collections.singleton(fileDirPath)));
			latch.countDown();
		}
	}
}
